// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Assigns a severity level (low, medium, high) to each identified condition
 * based on the transcribed notes, cross-referencing medical databases.
 *
 * - assessConditionSeverity - A function that handles the severity assessment process.
 * - AssessConditionSeverityInput - The input type for the assessConditionSeverity function.
 * - AssessConditionSeverityOutput - The return type for the assessConditionSeverity function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessConditionSeverityInputSchema = z.object({
  condition: z.string().describe('The medical condition to assess.'),
  notes: z.string().describe('The transcribed doctor\u0027s notes related to the condition.'),
});
export type AssessConditionSeverityInput = z.infer<typeof AssessConditionSeverityInputSchema>;

const AssessConditionSeverityOutputSchema = z.object({
  severity: z.enum(['low', 'medium', 'high']).describe('The assessed severity level of the condition.'),
  reason: z.string().describe('The reasoning behind the severity assessment.'),
});
export type AssessConditionSeverityOutput = z.infer<typeof AssessConditionSeverityOutputSchema>;

export async function assessConditionSeverity(input: AssessConditionSeverityInput): Promise<AssessConditionSeverityOutput> {
  return assessConditionSeverityFlow(input);
}

const assessConditionSeverityPrompt = ai.definePrompt({
  name: 'assessConditionSeverityPrompt',
  input: {schema: AssessConditionSeverityInputSchema},
  output: {schema: AssessConditionSeverityOutputSchema},
  prompt: `You are an expert medical professional tasked with assessing the severity of a medical condition based on doctor\'s notes.

  Condition: {{{condition}}}
  Notes: {{{notes}}}

  Assess the severity of the condition as either \"low\", \"medium\", or \"high\". Provide a brief reason for your assessment.
  Consider cross-referencing medical databases and using your reasoning ability to identify likely severity levels based on the provided information.
  Return the severity and reason in the JSON format.`,
});

const assessConditionSeverityFlow = ai.defineFlow(
  {
    name: 'assessConditionSeverityFlow',
    inputSchema: AssessConditionSeverityInputSchema,
    outputSchema: AssessConditionSeverityOutputSchema,
  },
  async input => {
    const response = await assessConditionSeverityPrompt(input);
    if (!response.output) {
      console.error(
        `Genkit prompt '${assessConditionSeverityPrompt.name}' did not return the expected output. Input: ${JSON.stringify(input, null, 2)}. Full response: ${JSON.stringify(response, null, 2)}`
      );
      throw new Error(
        `The AI model failed to generate a valid response for prompt '${assessConditionSeverityPrompt.name}'.`
      );
    }
    return response.output;
  }
);
